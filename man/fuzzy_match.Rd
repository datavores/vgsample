% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fuzzy_match.R
\name{fuzzy_match}
\alias{fuzzy_match}
\title{Fuzzy match (single term).}
\usage{
fuzzy_match(term, term_vector, max_dist = 0.1, min_test_length = NA,
  skip_pure_digit = FALSE, dist_method = "jw", jw_penalty = 0)
}
\arguments{
\item{term}{Character string (term to be evaluated for matches).}

\item{term_vector}{Character vector (for term to be evaluated against).}

\item{max_dist}{Numeric from 0 to 1. Sets threshold for no match. See agrepl.}

\item{min_test_length}{Integer. Sets minimum length for term to be evaluated
at all.}

\item{skip_pure_digit}{Boolean. If TRUE, a term that consists only of digits
will not be evaluated at all.}
}
\value{
Returns a list with two elements, "match_logic" and "matches".
  "match_logic" is a vector of booleans that could be used to subset the term
  population to extract matched values. "matches" is a character vector with
  the matched values.
}
\description{
Checks term against term vector for fuzzy matches.
}
\details{
Takes a character string (term) and a character vector (population of terms)
as inputs. Uses the base R agrepl function to perform fuzzy string matching
(see optional parameters for how this behavior can be tweaked). Returns a
list including a vector of any terms "matching" the target term and vector of
boolean values that can be used to subset the population of terms for the
same values.
}

